// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/felipe_rodrigues/poll-api/pkg/domain/models"

// VoteService is an autogenerated mock type for the VoteService type
type VoteService struct {
	mock.Mock
}

// CanVote provides a mock function with given fields: params, vote
func (_m *VoteService) CanVote(params map[string]string, vote models.Vote) (bool, models.GeneralResponse, int) {
	ret := _m.Called(params, vote)

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]string, models.Vote) bool); ok {
		r0 = rf(params, vote)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 models.GeneralResponse
	if rf, ok := ret.Get(1).(func(map[string]string, models.Vote) models.GeneralResponse); ok {
		r1 = rf(params, vote)
	} else {
		r1 = ret.Get(1).(models.GeneralResponse)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(map[string]string, models.Vote) int); ok {
		r2 = rf(params, vote)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// Create provides a mock function with given fields: _a0, vote
func (_m *VoteService) Create(_a0 context.Context, vote models.Vote) models.Vote {
	ret := _m.Called(_a0, vote)

	var r0 models.Vote
	if rf, ok := ret.Get(0).(func(context.Context, models.Vote) models.Vote); ok {
		r0 = rf(_a0, vote)
	} else {
		r0 = ret.Get(0).(models.Vote)
	}

	return r0
}

// Vote provides a mock function with given fields: vote, queueName
func (_m *VoteService) Vote(vote models.Vote, queueName string) <-chan bool {
	ret := _m.Called(vote, queueName)

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func(models.Vote, string) <-chan bool); ok {
		r0 = rf(vote, queueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}
